[
  {
    "name": "1+3\n",
    "params": [
      "1+3"
    ],
    "output": "expr : 1+3\nresult : 4.000000\n"
  },
  {
    "name": "1-3\n",
    "params": [
      "1-3"
    ],
    "output": "expr : 1-3\nresult : -2.000000\n"
  },
  {
    "name": "1*3\n",
    "params": [
      "1*3"
    ],
    "output": "expr : 1*3\nresult : 3.000000\n"
  },
  {
    "name": "1/3\n",
    "params": [
      "1/3"
    ],
    "output": "expr : 1/3\nresult : 0.333333\n"
  },
  {
    "name": "11+33\n",
    "params": [
      "11+33"
    ],
    "output": "expr : 11+33\nresult : 44.000000\n"
  },
  {
    "name": "11-33\n",
    "params": [
      "11-33"
    ],
    "output": "expr : 11-33\nresult : -22.000000\n"
  },
  {
    "name": "11*33\n",
    "params": [
      "11*33"
    ],
    "output": "expr : 11*33\nresult : 363.000000\n"
  },
  {
    "name": "11/33\n",
    "params": [
      "11/33"
    ],
    "output": "expr : 11/33\nresult : 0.333333\n"
  },
  {
    "name": "345+1300\n",
    "params": [
      "345+1300"
    ],
    "output": "expr : 345+1300\nresult : 1645.000000\n"
  },
  {
    "name": "345-1300\n",
    "params": [
      "345-1300"
    ],
    "output": "expr : 345-1300\nresult : -955.000000\n"
  },
  {
    "name": "345*1300\n",
    "params": [
      "345*1300"
    ],
    "output": "expr : 345*1300\nresult : 448500.000000\n"
  },
  {
    "name": "345/1300\n",
    "params": [
      "345/1300"
    ],
    "output": "expr : 345/1300\nresult : 0.265385\n"
  },
  {
    "name": "11+22+33\n",
    "params": [
      "11+22+33"
    ],
    "output": "expr : 11+22+33\nresult : 66.000000\n"
  },
  {
    "name": "11-22-33\n",
    "params": [
      "11-22-33"
    ],
    "output": "expr : 11-22-33\nresult : -44.000000\n"
  },
  {
    "name": "11*22*33\n",
    "params": [
      "11*22*33"
    ],
    "output": "expr : 11*22*33\nresult : 7986.000000\n"
  },
  {
    "name": "11/22/33\n",
    "params": [
      "11/22/33"
    ],
    "output": "expr : 11/22/33\nresult : 0.015152\n"
  },
  {
    "name": "11+22+\n",
    "params": [
      "11+22+"
    ],
    "output": "expr : 11+22+\nError: Failed to read real number\nExpression '11+22+' failed to parse, returning nan\nresult : -nan\n"
  },
  {
    "name": "11+\n",
    "params": [
      "11+"
    ],
    "output": "expr : 11+\nError: Failed to read real number\nExpression '11+' failed to parse, returning nan\nresult : -nan\n"
  },
  {
    "name": "*22\n",
    "params": [
      "*22"
    ],
    "output": "expr : *22\nError: Failed to read real number\nExpression '*22' failed to parse, returning nan\nresult : -nan\n"
  },
  {
    "name": "/22\n",
    "params": [
      "/22"
    ],
    "output": "expr : /22\nError: Failed to read real number\nExpression '/22' failed to parse, returning nan\nresult : -nan\n"
  },
  {
    "name": "12+22/\n",
    "params": [
      "12+22/"
    ],
    "output": "expr : 12+22/\nError: Failed to read real number\nExpression '12+22/' failed to parse, returning nan\nresult : -nan\n"
  },
  {
    "name": "3+55*\n",
    "params": [
      "3+55*"
    ],
    "output": "expr : 3+55*\nError: Failed to read real number\nExpression '3+55*' failed to parse, returning nan\nresult : -nan\n"
  },
  {
    "name": "+3\n",
    "params": [
      "+3"
    ],
    "output": "expr : +3\nresult : 3.000000\n"
  },
  {
    "name": "-3\n",
    "params": [
      "-3"
    ],
    "output": "expr : -3\nresult : -3.000000\n"
  },
  {
    "name": "1+(22+3)\n",
    "params": [
      "1+(22+3)"
    ],
    "output": "expr : 1+(22+3)\nresult : 26.000000\n"
  },
  {
    "name": "1-(2-33)\n",
    "params": [
      "1-(2-33)"
    ],
    "output": "expr : 1-(2-33)\nresult : 32.000000\n"
  },
  {
    "name": "11*(2*3)\n",
    "params": [
      "11*(2*3)"
    ],
    "output": "expr : 11*(2*3)\nresult : 66.000000\n"
  },
  {
    "name": "1/(22/33)\n",
    "params": [
      "1/(22/33)"
    ],
    "output": "expr : 1/(22/33)\nresult : 1.500000\n"
  },
  {
    "name": "(56+78)\n",
    "params": [
      "(56+78)"
    ],
    "output": "expr : (56+78)\nresult : 134.000000\n"
  },
  {
    "name": "(23/44+5)\n",
    "params": [
      "(23/44+5)"
    ],
    "output": "expr : (23/44+5)\nresult : 5.522727\n"
  },
  {
    "name": "23/(44+5)\n",
    "params": [
      "23/(44+5)"
    ],
    "output": "expr : 23/(44+5)\nresult : 0.469388\n"
  },
  {
    "name": "1/(-3)\n",
    "params": [
      "1/(-3)"
    ],
    "output": "expr : 1/(-3)\nresult : -0.333333\n"
  },
  {
    "name": "-34/2\n",
    "params": [
      "-34/2"
    ],
    "output": "expr : -34/2\nresult : -17.000000\n"
  },
  {
    "name": "+25+1\n",
    "params": [
      "+25+1"
    ],
    "output": "expr : +25+1\nresult : 26.000000\n"
  },
  {
    "name": "-1*(-25)\n",
    "params": [
      "-1*(-25)"
    ],
    "output": "expr : -1*(-25)\nresult : 25.000000\n"
  },
  {
    "name": "(-3)\n",
    "params": [
      "(-3)"
    ],
    "output": "expr : (-3)\nresult : -3.000000\n"
  },
  {
    "name": "(+2)\n",
    "params": [
      "(+2)"
    ],
    "output": "expr : (+2)\nresult : 2.000000\n"
  },
  {
    "name": "1+(2+3\n",
    "params": [
      "1+(2+3"
    ],
    "output": "expr : 1+(2+3\nError: Expected ')'!\nExpression '1+(2+3' failed to parse, returning nan\nresult : -nan\n"
  },
  {
    "name": "(23+(4\n",
    "params": [
      "(23+(4"
    ],
    "output": "expr : (23+(4\nError: Expected ')'!\nExpression '(23+(4' failed to parse, returning nan\nresult : -nan\n"
  },
  {
    "name": "1+2)\n",
    "params": [
      "1+2)"
    ],
    "output": "expr : 1+2)\nError: Failed to reach end of input expression, likely malformed input\nExpression '1+2)' failed to parse, returning nan\nresult : -nan\n"
  },
  {
    "name": "23)+4\n",
    "params": [
      "23)+4"
    ],
    "output": "expr : 23)+4\nError: Failed to reach end of input expression, likely malformed input\nExpression '23)+4' failed to parse, returning nan\nresult : -nan\n"
  },
  {
    "name": "1(45)\n",
    "params": [
      "1(45)"
    ],
    "output": "expr : 1(45)\nError: Failed to reach end of input expression, likely malformed input\nExpression '1(45)' failed to parse, returning nan\nresult : -nan\n"
  },
  {
    "name": "34(+3)\n",
    "params": [
      "34(+3)"
    ],
    "output": "expr : 34(+3)\nError: Failed to reach end of input expression, likely malformed input\nExpression '34(+3)' failed to parse, returning nan\nresult : -nan\n"
  },
  {
    "name": "3()\n",
    "params": [
      "3()"
    ],
    "output": "expr : 3()\nError: Failed to reach end of input expression, likely malformed input\nExpression '3()' failed to parse, returning nan\nresult : -nan\n"
  },
  {
    "name": "(+)\n",
    "params": [
      "(+)"
    ],
    "output": "expr : (+)\nError: Failed to read real number\nExpression '(+)' failed to parse, returning nan\nresult : -nan\n"
  },
  {
    "name": "(\n",
    "params": [
      "("
    ],
    "output": "expr : (\nError: Failed to read real number\nExpression '(' failed to parse, returning nan\nresult : -nan\n"
  },
  {
    "name": ")\n",
    "params": [
      ")"
    ],
    "output": "expr : )\nError: Failed to read real number\nExpression ')' failed to parse, returning nan\nresult : -nan\n"
  },
  {
    "name": "()\n",
    "params": [
      "()"
    ],
    "output": "expr : ()\nError: Failed to read real number\nExpression '()' failed to parse, returning nan\nresult : -nan\n"
  },
  {
    "name": "2\n",
    "params": [
      "2"
    ],
    "output": "expr : 2\nresult : 2.000000\n"
  },
  {
    "name": "12\n",
    "params": [
      "12"
    ],
    "output": "expr : 12\nresult : 12.000000\n"
  },
  {
    "name": "450\n",
    "params": [
      "450"
    ],
    "output": "expr : 450\nresult : 450.000000\n"
  },
  {
    "name": "-\n",
    "params": [
      "-"
    ],
    "output": "expr : -\nError: Failed to read real number\nExpression '-' failed to parse, returning nan\nresult : -nan\n"
  },
  {
    "name": "+\n",
    "params": [
      "+"
    ],
    "output": "expr : +\nError: Failed to read real number\nExpression '+' failed to parse, returning nan\nresult : -nan\n"
  },
  {
    "name": "*\n",
    "params": [
      "*"
    ],
    "output": "expr : *\nError: Failed to read real number\nExpression '*' failed to parse, returning nan\nresult : -nan\n"
  },
  {
    "name": "/\n",
    "params": [
      "/"
    ],
    "output": "expr : /\nError: Failed to read real number\nExpression '/' failed to parse, returning nan\nresult : -nan\n"
  },
  {
    "name": "sin\n",
    "params": [
      "sin"
    ],
    "output": "expr : sin\nError: Could not look up value for variable!\nExpression 'sin' failed to parse, returning nan\nresult : -nan\n"
  },
  {
    "name": "log\n",
    "params": [
      "log"
    ],
    "output": "expr : log\nError: Could not look up value for variable!\nExpression 'log' failed to parse, returning nan\nresult : -nan\n"
  },
  {
    "name": "+2\n",
    "params": [
      "+2"
    ],
    "output": "expr : +2\nresult : 2.000000\n"
  },
  {
    "name": "-2\n",
    "params": [
      "-2"
    ],
    "output": "expr : -2\nresult : -2.000000\n"
  },
  {
    "name": "*2\n",
    "params": [
      "*2"
    ],
    "output": "expr : *2\nError: Failed to read real number\nExpression '*2' failed to parse, returning nan\nresult : -nan\n"
  },
  {
    "name": "/2\n",
    "params": [
      "/2"
    ],
    "output": "expr : /2\nError: Failed to read real number\nExpression '/2' failed to parse, returning nan\nresult : -nan\n"
  },
  {
    "name": " 1+2+3\n",
    "params": [
      "1+2+3"
    ],
    "output": "expr : 1+2+3\nresult : 6.000000\n"
  },
  {
    "name": "1 +2+3\n",
    "params": [
      "1 +2+3"
    ],
    "output": "expr : 1 +2+3\nresult : 6.000000\n"
  },
  {
    "name": "1+ 2+3\n",
    "params": [
      "1+ 2+3"
    ],
    "output": "expr : 1+ 2+3\nresult : 6.000000\n"
  },
  {
    "name": "1+2 +3\n",
    "params": [
      "1+2 +3"
    ],
    "output": "expr : 1+2 +3\nresult : 6.000000\n"
  },
  {
    "name": "1+2+ 3\n",
    "params": [
      "1+2+ 3"
    ],
    "output": "expr : 1+2+ 3\nresult : 6.000000\n"
  },
  {
    "name": "1+2+3 \n",
    "params": [
      "1+2+3"
    ],
    "output": "expr : 1+2+3\nresult : 6.000000\n"
  },
  {
    "name": "1 + 2 + 3\n",
    "params": [
      "1 + 2 + 3"
    ],
    "output": "expr : 1 + 2 + 3\nresult : 6.000000\n"
  },
  {
    "name": "12 450\n",
    "params": [
      "12 450"
    ],
    "output": "expr : 12 450\nError: Failed to reach end of input expression, likely malformed input\nExpression '12 450' failed to parse, returning nan\nresult : -nan\n"
  },
  {
    "name": "+5 6\n",
    "params": [
      "+5 6"
    ],
    "output": "expr : +5 6\nError: Failed to reach end of input expression, likely malformed input\nExpression '+5 6' failed to parse, returning nan\nresult : -nan\n"
  },
  {
    "name": ".1\n",
    "params": [
      ".1"
    ],
    "output": "expr : .1\nresult : 0.100000\n"
  },
  {
    "name": "-.1\n",
    "params": [
      "-.1"
    ],
    "output": "expr : -.1\nresult : -0.100000\n"
  },
  {
    "name": "1+.1\n",
    "params": [
      "1+.1"
    ],
    "output": "expr : 1+.1\nresult : 1.100000\n"
  },
  {
    "name": "1 .1\n",
    "params": [
      "1 .1"
    ],
    "output": "expr : 1 .1\nError: Failed to reach end of input expression, likely malformed input\nExpression '1 .1' failed to parse, returning nan\nresult : -nan\n"
  },
  {
    "name": "1. 1\n",
    "params": [
      "1. 1"
    ],
    "output": "expr : 1. 1\nError: Failed to reach end of input expression, likely malformed input\nExpression '1. 1' failed to parse, returning nan\nresult : -nan\n"
  },
  {
    "name": "+.1\n",
    "params": [
      "+.1"
    ],
    "output": "expr : +.1\nresult : 0.100000\n"
  },
  {
    "name": "*.1\n",
    "params": [
      "*.1"
    ],
    "output": "expr : *.1\nError: Failed to read real number\nExpression '*.1' failed to parse, returning nan\nresult : -nan\n"
  },
  {
    "name": "/.1\n",
    "params": [
      "/.1"
    ],
    "output": "expr : /.1\nError: Failed to read real number\nExpression '/.1' failed to parse, returning nan\nresult : -nan\n"
  },
  {
    "name": "(.1)+1\n",
    "params": [
      "(.1)+1"
    ],
    "output": "expr : (.1)+1\nresult : 1.100000\n"
  },
  {
    "name": "12.1+32.1\n",
    "params": [
      "12.1+32.1"
    ],
    "output": "expr : 12.1+32.1\nresult : 44.200000\n"
  },
  {
    "name": "(23*0.4)\n",
    "params": [
      "(23*0.4)"
    ],
    "output": "expr : (23*0.4)\nresult : 9.200000\n"
  },
  {
    "name": "(23*.4)\n",
    "params": [
      "(23*.4)"
    ],
    "output": "expr : (23*.4)\nresult : 9.200000\n"
  },
  {
    "name": "2^3\n",
    "params": [
      "2^3"
    ],
    "output": "expr : 2^3\nresult : 8.000000\n"
  },
  {
    "name": "2^128\n",
    "params": [
      "2^128"
    ],
    "output": "expr : 2^128\nresult : 340282366920938463463374607431768211456.000000\n"
  },
  {
    "name": "^3\n",
    "params": [
      "^3"
    ],
    "output": "expr : ^3\nError: Failed to read real number\nExpression '^3' failed to parse, returning nan\nresult : -nan\n"
  },
  {
    "name": "2^\n",
    "params": [
      "2^"
    ],
    "output": "expr : 2^\nError: Failed to read real number\nExpression '2^' failed to parse, returning nan\nresult : -nan\n"
  },
  {
    "name": "pow(2,2)\n",
    "params": [
      "pow(2,2)"
    ],
    "output": "expr : pow(2,2)\nresult : 4.000000\n"
  },
  {
    "name": "sqrt(2)\n",
    "params": [
      "sqrt(2)"
    ],
    "output": "expr : sqrt(2)\nresult : 1.414214\n"
  },
  {
    "name": "log(2)\n",
    "params": [
      "log(2)"
    ],
    "output": "expr : log(2)\nresult : 0.693147\n"
  },
  {
    "name": "exp(2)\n",
    "params": [
      "exp(2)"
    ],
    "output": "expr : exp(2)\nresult : 7.389056\n"
  },
  {
    "name": "sin(2)\n",
    "params": [
      "sin(2)"
    ],
    "output": "expr : sin(2)\nresult : 0.909297\n"
  },
  {
    "name": "asin(0.2)\n",
    "params": [
      "asin(0.2)"
    ],
    "output": "expr : asin(0.2)\nresult : 0.201358\n"
  },
  {
    "name": "cos(2)\n",
    "params": [
      "cos(2)"
    ],
    "output": "expr : cos(2)\nresult : -0.416147\n"
  },
  {
    "name": "acos(0.2)\n",
    "params": [
      "acos(0.2)"
    ],
    "output": "expr : acos(0.2)\nresult : 1.369438\n"
  },
  {
    "name": "tan(2)\n",
    "params": [
      "tan(2)"
    ],
    "output": "expr : tan(2)\nresult : -2.185040\n"
  },
  {
    "name": "atan(2)\n",
    "params": [
      "atan(2)"
    ],
    "output": "expr : atan(2)\nresult : 1.107149\n"
  },
  {
    "name": "atan2(2,2)\n",
    "params": [
      "atan2(2,2)"
    ],
    "output": "expr : atan2(2,2)\nresult : 0.785398\n"
  },
  {
    "name": "abs(2)\n",
    "params": [
      "abs(2)"
    ],
    "output": "expr : abs(2)\nresult : 2.000000\n"
  },
  {
    "name": "fabs(2)\n",
    "params": [
      "fabs(2)"
    ],
    "output": "expr : fabs(2)\nresult : 2.000000\n"
  },
  {
    "name": "floor(2)\n",
    "params": [
      "floor(2)"
    ],
    "output": "expr : floor(2)\nresult : 2.000000\n"
  },
  {
    "name": "ceil(2)\n",
    "params": [
      "ceil(2)"
    ],
    "output": "expr : ceil(2)\nresult : 2.000000\n"
  },
  {
    "name": "round(2)\n",
    "params": [
      "round(2)"
    ],
    "output": "expr : round(2)\nresult : 2.000000\n"
  },
  {
    "name": "pow(34,2)\n",
    "params": [
      "pow(34,2)"
    ],
    "output": "expr : pow(34,2)\nresult : 1156.000000\n"
  },
  {
    "name": "sqrt(34)\n",
    "params": [
      "sqrt(34)"
    ],
    "output": "expr : sqrt(34)\nresult : 5.830952\n"
  },
  {
    "name": "log(34)\n",
    "params": [
      "log(34)"
    ],
    "output": "expr : log(34)\nresult : 3.526361\n"
  },
  {
    "name": "exp(34)\n",
    "params": [
      "exp(34)"
    ],
    "output": "expr : exp(34)\nresult : 583461742527454.875000\n"
  },
  {
    "name": "sin(34)\n",
    "params": [
      "sin(34)"
    ],
    "output": "expr : sin(34)\nresult : 0.529083\n"
  },
  {
    "name": "asin(0.34)\n",
    "params": [
      "asin(0.34)"
    ],
    "output": "expr : asin(0.34)\nresult : 0.346917\n"
  },
  {
    "name": "cos(34)\n",
    "params": [
      "cos(34)"
    ],
    "output": "expr : cos(34)\nresult : -0.848570\n"
  },
  {
    "name": "acos(0.34)\n",
    "params": [
      "acos(0.34)"
    ],
    "output": "expr : acos(0.34)\nresult : 1.223879\n"
  },
  {
    "name": "tan(34)\n",
    "params": [
      "tan(34)"
    ],
    "output": "expr : tan(34)\nresult : -0.623499\n"
  },
  {
    "name": "atan(34)\n",
    "params": [
      "atan(34)"
    ],
    "output": "expr : atan(34)\nresult : 1.541393\n"
  },
  {
    "name": "atan2(34,2)\n",
    "params": [
      "atan2(34,2)"
    ],
    "output": "expr : atan2(34,2)\nresult : 1.512041\n"
  },
  {
    "name": "abs(34)\n",
    "params": [
      "abs(34)"
    ],
    "output": "expr : abs(34)\nresult : 34.000000\n"
  },
  {
    "name": "fabs(34)\n",
    "params": [
      "fabs(34)"
    ],
    "output": "expr : fabs(34)\nresult : 34.000000\n"
  },
  {
    "name": "floor(34)\n",
    "params": [
      "floor(34)"
    ],
    "output": "expr : floor(34)\nresult : 34.000000\n"
  },
  {
    "name": "ceil(34)\n",
    "params": [
      "ceil(34)"
    ],
    "output": "expr : ceil(34)\nresult : 34.000000\n"
  },
  {
    "name": "round(34)\n",
    "params": [
      "round(34)"
    ],
    "output": "expr : round(34)\nresult : 34.000000\n"
  },
  {
    "name": "pow(11.5,2)\n",
    "params": [
      "pow(11.5,2)"
    ],
    "output": "expr : pow(11.5,2)\nresult : 132.250000\n"
  },
  {
    "name": "sqrt(11.5)\n",
    "params": [
      "sqrt(11.5)"
    ],
    "output": "expr : sqrt(11.5)\nresult : 3.391165\n"
  },
  {
    "name": "log(11.5)\n",
    "params": [
      "log(11.5)"
    ],
    "output": "expr : log(11.5)\nresult : 2.442347\n"
  },
  {
    "name": "exp(11.5)\n",
    "params": [
      "exp(11.5)"
    ],
    "output": "expr : exp(11.5)\nresult : 98715.771011\n"
  },
  {
    "name": "sin(11.5)\n",
    "params": [
      "sin(11.5)"
    ],
    "output": "expr : sin(11.5)\nresult : -0.875452\n"
  },
  {
    "name": "asin(0.5)\n",
    "params": [
      "asin(0.5)"
    ],
    "output": "expr : asin(0.5)\nresult : 0.523599\n"
  },
  {
    "name": "cos(11.5)\n",
    "params": [
      "cos(11.5)"
    ],
    "output": "expr : cos(11.5)\nresult : 0.483305\n"
  },
  {
    "name": "acos(0.5)\n",
    "params": [
      "acos(0.5)"
    ],
    "output": "expr : acos(0.5)\nresult : 1.047198\n"
  },
  {
    "name": "tan(11.5)\n",
    "params": [
      "tan(11.5)"
    ],
    "output": "expr : tan(11.5)\nresult : -1.811387\n"
  },
  {
    "name": "atan(11.5)\n",
    "params": [
      "atan(11.5)"
    ],
    "output": "expr : atan(11.5)\nresult : 1.484058\n"
  },
  {
    "name": "atan2(11.5,2)\n",
    "params": [
      "atan2(11.5,2)"
    ],
    "output": "expr : atan2(11.5,2)\nresult : 1.398606\n"
  },
  {
    "name": "abs(11.5)\n",
    "params": [
      "abs(11.5)"
    ],
    "output": "expr : abs(11.5)\nresult : 11.000000\n"
  },
  {
    "name": "fabs(11.5)\n",
    "params": [
      "fabs(11.5)"
    ],
    "output": "expr : fabs(11.5)\nresult : 11.500000\n"
  },
  {
    "name": "floor(11.5)\n",
    "params": [
      "floor(11.5)"
    ],
    "output": "expr : floor(11.5)\nresult : 11.000000\n"
  },
  {
    "name": "ceil(11.5)\n",
    "params": [
      "ceil(11.5)"
    ],
    "output": "expr : ceil(11.5)\nresult : 11.000000\n"
  },
  {
    "name": "round(11.5)\n",
    "params": [
      "round(11.5)"
    ],
    "output": "expr : round(11.5)\nresult : 12.000000\n"
  },
  {
    "name": "pow(11.6,2)\n",
    "params": [
      "pow(11.6,2)"
    ],
    "output": "expr : pow(11.6,2)\nresult : 134.560000\n"
  },
  {
    "name": "sqrt(11.6)\n",
    "params": [
      "sqrt(11.6)"
    ],
    "output": "expr : sqrt(11.6)\nresult : 3.405877\n"
  },
  {
    "name": "log(11.6)\n",
    "params": [
      "log(11.6)"
    ],
    "output": "expr : log(11.6)\nresult : 2.451005\n"
  },
  {
    "name": "exp(11.6)\n",
    "params": [
      "exp(11.6)"
    ],
    "output": "expr : exp(11.6)\nresult : 109097.799277\n"
  },
  {
    "name": "sin(11.6)\n",
    "params": [
      "sin(11.6)"
    ],
    "output": "expr : sin(11.6)\nresult : -0.822829\n"
  },
  {
    "name": "asin(0.6)\n",
    "params": [
      "asin(0.6)"
    ],
    "output": "expr : asin(0.6)\nresult : 0.643501\n"
  },
  {
    "name": "cos(11.6)\n",
    "params": [
      "cos(11.6)"
    ],
    "output": "expr : cos(11.6)\nresult : 0.568290\n"
  },
  {
    "name": "acos(0.6)\n",
    "params": [
      "acos(0.6)"
    ],
    "output": "expr : acos(0.6)\nresult : 0.927295\n"
  },
  {
    "name": "tan(11.6)\n",
    "params": [
      "tan(11.6)"
    ],
    "output": "expr : tan(11.6)\nresult : -1.447904\n"
  },
  {
    "name": "atan(11.6)\n",
    "params": [
      "atan(11.6)"
    ],
    "output": "expr : atan(11.6)\nresult : 1.484802\n"
  },
  {
    "name": "atan2(11.6,2)\n",
    "params": [
      "atan2(11.6,2)"
    ],
    "output": "expr : atan2(11.6,2)\nresult : 1.400061\n"
  },
  {
    "name": "abs(11.6)\n",
    "params": [
      "abs(11.6)"
    ],
    "output": "expr : abs(11.6)\nresult : 11.000000\n"
  },
  {
    "name": "fabs(11.6)\n",
    "params": [
      "fabs(11.6)"
    ],
    "output": "expr : fabs(11.6)\nresult : 11.600000\n"
  },
  {
    "name": "floor(11.6)\n",
    "params": [
      "floor(11.6)"
    ],
    "output": "expr : floor(11.6)\nresult : 11.000000\n"
  },
  {
    "name": "ceil(11.6)\n",
    "params": [
      "ceil(11.6)"
    ],
    "output": "expr : ceil(11.6)\nresult : 11.000000\n"
  },
  {
    "name": "round(11.6)\n",
    "params": [
      "round(11.6)"
    ],
    "output": "expr : round(11.6)\nresult : 12.000000\n"
  },
  {
    "name": "pow(11.0,2)\n",
    "params": [
      "pow(11.0,2)"
    ],
    "output": "expr : pow(11.0,2)\nresult : 121.000000\n"
  },
  {
    "name": "sqrt(11.0)\n",
    "params": [
      "sqrt(11.0)"
    ],
    "output": "expr : sqrt(11.0)\nresult : 3.316625\n"
  },
  {
    "name": "log(11.0)\n",
    "params": [
      "log(11.0)"
    ],
    "output": "expr : log(11.0)\nresult : 2.397895\n"
  },
  {
    "name": "exp(11.0)\n",
    "params": [
      "exp(11.0)"
    ],
    "output": "expr : exp(11.0)\nresult : 59874.141715\n"
  },
  {
    "name": "sin(11.0)\n",
    "params": [
      "sin(11.0)"
    ],
    "output": "expr : sin(11.0)\nresult : -0.999990\n"
  },
  {
    "name": "asin(0.0)\n",
    "params": [
      "asin(0.0)"
    ],
    "output": "expr : asin(0.0)\nresult : 0.000000\n"
  },
  {
    "name": "cos(11.0)\n",
    "params": [
      "cos(11.0)"
    ],
    "output": "expr : cos(11.0)\nresult : 0.004426\n"
  },
  {
    "name": "acos(0.0)\n",
    "params": [
      "acos(0.0)"
    ],
    "output": "expr : acos(0.0)\nresult : 1.570796\n"
  },
  {
    "name": "tan(11.0)\n",
    "params": [
      "tan(11.0)"
    ],
    "output": "expr : tan(11.0)\nresult : -225.950846\n"
  },
  {
    "name": "atan(11.0)\n",
    "params": [
      "atan(11.0)"
    ],
    "output": "expr : atan(11.0)\nresult : 1.480136\n"
  },
  {
    "name": "atan2(11.0,2)\n",
    "params": [
      "atan2(11.0,2)"
    ],
    "output": "expr : atan2(11.0,2)\nresult : 1.390943\n"
  },
  {
    "name": "abs(11.0)\n",
    "params": [
      "abs(11.0)"
    ],
    "output": "expr : abs(11.0)\nresult : 11.000000\n"
  },
  {
    "name": "fabs(11.0)\n",
    "params": [
      "fabs(11.0)"
    ],
    "output": "expr : fabs(11.0)\nresult : 11.000000\n"
  },
  {
    "name": "floor(11.0)\n",
    "params": [
      "floor(11.0)"
    ],
    "output": "expr : floor(11.0)\nresult : 11.000000\n"
  },
  {
    "name": "ceil(11.0)\n",
    "params": [
      "ceil(11.0)"
    ],
    "output": "expr : ceil(11.0)\nresult : 11.000000\n"
  },
  {
    "name": "round(11.0)\n",
    "params": [
      "round(11.0)"
    ],
    "output": "expr : round(11.0)\nresult : 11.000000\n"
  },
  {
    "name": "pow(11.1,2)\n",
    "params": [
      "pow(11.1,2)"
    ],
    "output": "expr : pow(11.1,2)\nresult : 123.210000\n"
  },
  {
    "name": "sqrt(11.1)\n",
    "params": [
      "sqrt(11.1)"
    ],
    "output": "expr : sqrt(11.1)\nresult : 3.331666\n"
  },
  {
    "name": "log(11.1)\n",
    "params": [
      "log(11.1)"
    ],
    "output": "expr : log(11.1)\nresult : 2.406945\n"
  },
  {
    "name": "exp(11.1)\n",
    "params": [
      "exp(11.1)"
    ],
    "output": "expr : exp(11.1)\nresult : 66171.160168\n"
  },
  {
    "name": "sin(11.1)\n",
    "params": [
      "sin(11.1)"
    ],
    "output": "expr : sin(11.1)\nresult : -0.994553\n"
  },
  {
    "name": "asin(0.1)\n",
    "params": [
      "asin(0.1)"
    ],
    "output": "expr : asin(0.1)\nresult : 0.100167\n"
  },
  {
    "name": "cos(11.1)\n",
    "params": [
      "cos(11.1)"
    ],
    "output": "expr : cos(11.1)\nresult : 0.104236\n"
  },
  {
    "name": "acos(0.1)\n",
    "params": [
      "acos(0.1)"
    ],
    "output": "expr : acos(0.1)\nresult : 1.470629\n"
  },
  {
    "name": "tan(11.1)\n",
    "params": [
      "tan(11.1)"
    ],
    "output": "expr : tan(11.1)\nresult : -9.541352\n"
  },
  {
    "name": "atan(11.1)\n",
    "params": [
      "atan(11.1)"
    ],
    "output": "expr : atan(11.1)\nresult : 1.480949\n"
  },
  {
    "name": "atan2(11.1,2)\n",
    "params": [
      "atan2(11.1,2)"
    ],
    "output": "expr : atan2(11.1,2)\nresult : 1.392529\n"
  },
  {
    "name": "abs(11.1)\n",
    "params": [
      "abs(11.1)"
    ],
    "output": "expr : abs(11.1)\nresult : 11.000000\n"
  },
  {
    "name": "fabs(11.1)\n",
    "params": [
      "fabs(11.1)"
    ],
    "output": "expr : fabs(11.1)\nresult : 11.100000\n"
  },
  {
    "name": "floor(11.1)\n",
    "params": [
      "floor(11.1)"
    ],
    "output": "expr : floor(11.1)\nresult : 11.000000\n"
  },
  {
    "name": "ceil(11.1)\n",
    "params": [
      "ceil(11.1)"
    ],
    "output": "expr : ceil(11.1)\nresult : 11.000000\n"
  },
  {
    "name": "round(11.1)\n",
    "params": [
      "round(11.1)"
    ],
    "output": "expr : round(11.1)\nresult : 11.000000\n"
  },
  {
    "name": "pow(11.9,2)\n",
    "params": [
      "pow(11.9,2)"
    ],
    "output": "expr : pow(11.9,2)\nresult : 141.610000\n"
  },
  {
    "name": "sqrt(11.9)\n",
    "params": [
      "sqrt(11.9)"
    ],
    "output": "expr : sqrt(11.9)\nresult : 3.449638\n"
  },
  {
    "name": "log(11.9)\n",
    "params": [
      "log(11.9)"
    ],
    "output": "expr : log(11.9)\nresult : 2.476538\n"
  },
  {
    "name": "exp(11.9)\n",
    "params": [
      "exp(11.9)"
    ],
    "output": "expr : exp(11.9)\nresult : 147266.625241\n"
  },
  {
    "name": "sin(11.9)\n",
    "params": [
      "sin(11.9)"
    ],
    "output": "expr : sin(11.9)\nresult : -0.618137\n"
  },
  {
    "name": "asin(0.9)\n",
    "params": [
      "asin(0.9)"
    ],
    "output": "expr : asin(0.9)\nresult : 1.119770\n"
  },
  {
    "name": "cos(11.9)\n",
    "params": [
      "cos(11.9)"
    ],
    "output": "expr : cos(11.9)\nresult : 0.786070\n"
  },
  {
    "name": "acos(0.9)\n",
    "params": [
      "acos(0.9)"
    ],
    "output": "expr : acos(0.9)\nresult : 0.451027\n"
  },
  {
    "name": "tan(11.9)\n",
    "params": [
      "tan(11.9)"
    ],
    "output": "expr : tan(11.9)\nresult : -0.786364\n"
  },
  {
    "name": "atan(11.9)\n",
    "params": [
      "atan(11.9)"
    ],
    "output": "expr : atan(11.9)\nresult : 1.486960\n"
  },
  {
    "name": "atan2(11.9,2)\n",
    "params": [
      "atan2(11.9,2)"
    ],
    "output": "expr : atan2(11.9,2)\nresult : 1.404285\n"
  },
  {
    "name": "abs(11.9)\n",
    "params": [
      "abs(11.9)"
    ],
    "output": "expr : abs(11.9)\nresult : 11.000000\n"
  },
  {
    "name": "fabs(11.9)\n",
    "params": [
      "fabs(11.9)"
    ],
    "output": "expr : fabs(11.9)\nresult : 11.900000\n"
  },
  {
    "name": "floor(11.9)\n",
    "params": [
      "floor(11.9)"
    ],
    "output": "expr : floor(11.9)\nresult : 11.000000\n"
  },
  {
    "name": "ceil(11.9)\n",
    "params": [
      "ceil(11.9)"
    ],
    "output": "expr : ceil(11.9)\nresult : 11.000000\n"
  },
  {
    "name": "round(11.9)\n",
    "params": [
      "round(11.9)"
    ],
    "output": "expr : round(11.9)\nresult : 12.000000\n"
  },
  {
    "name": "foo(2)\n",
    "params": [
      "foo(2)"
    ],
    "output": "expr : foo(2)\nError: Tried to call unknown built-in function!\nExpression 'foo(2)' failed to parse, returning nan\nresult : -nan\n"
  },
  {
    "name": "sin22\n",
    "params": [
      "sin22"
    ],
    "output": "expr : sin22\nError: Could not look up value for variable!\nExpression 'sin22' failed to parse, returning nan\nresult : -nan\n"
  },
  {
    "name": "sin 22\n",
    "params": [
      "sin 22"
    ],
    "output": "expr : sin 22\nError: Could not look up value for variable!\nExpression 'sin 22' failed to parse, returning nan\nresult : -nan\n"
  },
  {
    "name": "sin 2/3\n",
    "params": [
      "sin 2/3"
    ],
    "output": "expr : sin 2/3\nError: Could not look up value for variable!\nExpression 'sin 2/3' failed to parse, returning nan\nresult : -nan\n"
  },
  {
    "name": "sin2/3\n",
    "params": [
      "sin2/3"
    ],
    "output": "expr : sin2/3\nError: Could not look up value for variable!\nExpression 'sin2/3' failed to parse, returning nan\nresult : -nan\n"
  },
  {
    "name": "sin2/ 3\n",
    "params": [
      "sin2/ 3"
    ],
    "output": "expr : sin2/ 3\nError: Could not look up value for variable!\nExpression 'sin2/ 3' failed to parse, returning nan\nresult : -nan\n"
  },
  {
    "name": "sin2 /3\n",
    "params": [
      "sin2 /3"
    ],
    "output": "expr : sin2 /3\nError: Could not look up value for variable!\nExpression 'sin2 /3' failed to parse, returning nan\nresult : -nan\n"
  },
  {
    "name": "pow(2)\n",
    "params": [
      "pow(2)"
    ],
    "output": "expr : pow(2)\nError: Failed to read real number\nExpression 'pow(2)' failed to parse, returning nan\nresult : -nan\n"
  },
  {
    "name": "atan2(2)\n",
    "params": [
      "atan2(2)"
    ],
    "output": "expr : atan2(2)\nError: Failed to read real number\nExpression 'atan2(2)' failed to parse, returning nan\nresult : -nan\n"
  },
  {
    "name": "sqrt(-1)\n",
    "params": [
      "sqrt(-1)"
    ],
    "output": "expr : sqrt(-1)\nError: sqrt(x) undefined for x < 0!\nExpression 'sqrt(-1)' failed to parse, returning nan\nresult : -nan\n"
  },
  {
    "name": "log(0)\n",
    "params": [
      "log(0)"
    ],
    "output": "expr : log(0)\nError: log(x) undefined for x <= 0!\nExpression 'log(0)' failed to parse, returning nan\nresult : -nan\n"
  },
  {
    "name": "log(-1)\n",
    "params": [
      "log(-1)"
    ],
    "output": "expr : log(-1)\nError: log(x) undefined for x <= 0!\nExpression 'log(-1)' failed to parse, returning nan\nresult : -nan\n"
  },
  {
    "name": "asin(2)\n",
    "params": [
      "asin(2)"
    ],
    "output": "expr : asin(2)\nError: asin(x) undefined for |x| > 1!\nExpression 'asin(2)' failed to parse, returning nan\nresult : -nan\n"
  },
  {
    "name": "acos(2)\n",
    "params": [
      "acos(2)"
    ],
    "output": "expr : acos(2)\nError: acos(x) undefined for |x| > 1!\nExpression 'acos(2)' failed to parse, returning nan\nresult : -nan\n"
  },
  {
    "name": "asin(1)\n",
    "params": [
      "asin(1)"
    ],
    "output": "expr : asin(1)\nresult : 1.570796\n"
  },
  {
    "name": "acos(1)\n",
    "params": [
      "acos(1)"
    ],
    "output": "expr : acos(1)\nresult : 0.000000\n"
  },
  {
    "name": "sin(+1)\n",
    "params": [
      "sin(+1)"
    ],
    "output": "expr : sin(+1)\nresult : 0.841471\n"
  },
  {
    "name": "sin(-1)\n",
    "params": [
      "sin(-1)"
    ],
    "output": "expr : sin(-1)\nresult : -0.841471\n"
  },
  {
    "name": "sin(*1)\n",
    "params": [
      "sin(*1)"
    ],
    "output": "expr : sin(*1)\nError: Failed to read real number\nExpression 'sin(*1)' failed to parse, returning nan\nresult : -nan\n"
  },
  {
    "name": "sin(/1)\n",
    "params": [
      "sin(/1)"
    ],
    "output": "expr : sin(/1)\nError: Failed to read real number\nExpression 'sin(/1)' failed to parse, returning nan\nresult : -nan\n"
  },
  {
    "name": "sin(1+1)\n",
    "params": [
      "sin(1+1)"
    ],
    "output": "expr : sin(1+1)\nresult : 0.909297\n"
  },
  {
    "name": "sin (1+1)\n",
    "params": [
      "sin (1+1)"
    ],
    "output": "expr : sin (1+1)\nError: Could not look up value for variable!\nExpression 'sin (1+1)' failed to parse, returning nan\nresult : -nan\n"
  },
  {
    "name": "sin(1 +1)\n",
    "params": [
      "sin(1 +1)"
    ],
    "output": "expr : sin(1 +1)\nresult : 0.909297\n"
  },
  {
    "name": "sin ( 1 + 1 +1)\n",
    "params": [
      "sin ( 1 + 1 +1)"
    ],
    "output": "expr : sin ( 1 + 1 +1)\nError: Could not look up value for variable!\nExpression 'sin ( 1 + 1 +1)' failed to parse, returning nan\nresult : -nan\n"
  },
  {
    "name": "sin(1+)\n",
    "params": [
      "sin(1+)"
    ],
    "output": "expr : sin(1+)\nError: Failed to read real number\nExpression 'sin(1+)' failed to parse, returning nan\nresult : -nan\n"
  },
  {
    "name": "sin(1 1)\n",
    "params": [
      "sin(1 1)"
    ],
    "output": "expr : sin(1 1)\nError: Expected ')' in built-in call!\nExpression 'sin(1 1)' failed to parse, returning nan\nresult : -nan\n"
  },
  {
    "name": "sin\n",
    "params": [
      "sin"
    ],
    "output": "expr : sin\nError: Could not look up value for variable!\nExpression 'sin' failed to parse, returning nan\nresult : -nan\n"
  },
  {
    "name": "cos\n",
    "params": [
      "cos"
    ],
    "output": "expr : cos\nError: Could not look up value for variable!\nExpression 'cos' failed to parse, returning nan\nresult : -nan\n"
  },
  {
    "name": "!1\n",
    "params": [
      "!1"
    ],
    "output": "expr : !1\nresult : 0.000000\n"
  },
  {
    "name": "!0\n",
    "params": [
      "!0"
    ],
    "output": "expr : !0\nresult : 1.000000\n"
  },
  {
    "name": "!4\n",
    "params": [
      "!4"
    ],
    "output": "expr : !4\nresult : 0.000000\n"
  },
  {
    "name": "!-1\n",
    "params": [
      "!-1"
    ],
    "output": "expr : !-1\nresult : 0.000000\n"
  },
  {
    "name": "!-4\n",
    "params": [
      "!-4"
    ],
    "output": "expr : !-4\nresult : 0.000000\n"
  },
  {
    "name": "!(-1)\n",
    "params": [
      "!(-1)"
    ],
    "output": "expr : !(-1)\nresult : 0.000000\n"
  },
  {
    "name": "!(-4)\n",
    "params": [
      "!(-4)"
    ],
    "output": "expr : !(-4)\nresult : 0.000000\n"
  },
  {
    "name": "!(1)\n",
    "params": [
      "!(1)"
    ],
    "output": "expr : !(1)\nresult : 0.000000\n"
  },
  {
    "name": "!(0)\n",
    "params": [
      "!(0)"
    ],
    "output": "expr : !(0)\nresult : 1.000000\n"
  },
  {
    "name": "!(4)\n",
    "params": [
      "!(4)"
    ],
    "output": "expr : !(4)\nresult : 0.000000\n"
  },
  {
    "name": "1.0<2.0\n",
    "params": [
      "1.0<2.0"
    ],
    "output": "expr : 1.0<2.0\nresult : 1.000000\n"
  },
  {
    "name": "1.0>2.0\n",
    "params": [
      "1.0>2.0"
    ],
    "output": "expr : 1.0>2.0\nresult : 0.000000\n"
  },
  {
    "name": "1.0==2.0\n",
    "params": [
      "1.0==2.0"
    ],
    "output": "expr : 1.0==2.0\nresult : 0.000000\n"
  },
  {
    "name": "2.0<1.0\n",
    "params": [
      "2.0<1.0"
    ],
    "output": "expr : 2.0<1.0\nresult : 0.000000\n"
  },
  {
    "name": "2.0>1.0\n",
    "params": [
      "2.0>1.0"
    ],
    "output": "expr : 2.0>1.0\nresult : 1.000000\n"
  },
  {
    "name": "2.0==1.0\n",
    "params": [
      "2.0==1.0"
    ],
    "output": "expr : 2.0==1.0\nresult : 0.000000\n"
  },
  {
    "name": "1.0<=2.0\n",
    "params": [
      "1.0<=2.0"
    ],
    "output": "expr : 1.0<=2.0\nresult : 1.000000\n"
  },
  {
    "name": "1.0>=2.0\n",
    "params": [
      "1.0>=2.0"
    ],
    "output": "expr : 1.0>=2.0\nresult : 0.000000\n"
  },
  {
    "name": "2.0<=1.0\n",
    "params": [
      "2.0<=1.0"
    ],
    "output": "expr : 2.0<=1.0\nresult : 0.000000\n"
  },
  {
    "name": "2.0>=1.0\n",
    "params": [
      "2.0>=1.0"
    ],
    "output": "expr : 2.0>=1.0\nresult : 1.000000\n"
  },
  {
    "name": "1.0==1.0\n",
    "params": [
      "1.0==1.0"
    ],
    "output": "expr : 1.0==1.0\nresult : 1.000000\n"
  },
  {
    "name": "1.0>1.0\n",
    "params": [
      "1.0>1.0"
    ],
    "output": "expr : 1.0>1.0\nresult : 0.000000\n"
  },
  {
    "name": "1.0<1.0\n",
    "params": [
      "1.0<1.0"
    ],
    "output": "expr : 1.0<1.0\nresult : 0.000000\n"
  },
  {
    "name": "1.0>=1.0\n",
    "params": [
      "1.0>=1.0"
    ],
    "output": "expr : 1.0>=1.0\nresult : 1.000000\n"
  },
  {
    "name": "1.0<=1.0\n",
    "params": [
      "1.0<=1.0"
    ],
    "output": "expr : 1.0<=1.0\nresult : 1.000000\n"
  },
  {
    "name": "!1.0<2.0\n",
    "params": [
      "!1.0<2.0"
    ],
    "output": "expr : !1.0<2.0\nresult : 1.000000\n"
  },
  {
    "name": "!1.0>2.0\n",
    "params": [
      "!1.0>2.0"
    ],
    "output": "expr : !1.0>2.0\nresult : 0.000000\n"
  },
  {
    "name": "!1.0==2.0\n",
    "params": [
      "!1.0==2.0"
    ],
    "output": "expr : !1.0==2.0\nresult : 0.000000\n"
  },
  {
    "name": "!2.0<1.0\n",
    "params": [
      "!2.0<1.0"
    ],
    "output": "expr : !2.0<1.0\nresult : 1.000000\n"
  },
  {
    "name": "!2.0>1.0\n",
    "params": [
      "!2.0>1.0"
    ],
    "output": "expr : !2.0>1.0\nresult : 0.000000\n"
  },
  {
    "name": "!2.0==1.0\n",
    "params": [
      "!2.0==1.0"
    ],
    "output": "expr : !2.0==1.0\nresult : 0.000000\n"
  },
  {
    "name": "!1.0<=2.0\n",
    "params": [
      "!1.0<=2.0"
    ],
    "output": "expr : !1.0<=2.0\nresult : 1.000000\n"
  },
  {
    "name": "!1.0>=2.0\n",
    "params": [
      "!1.0>=2.0"
    ],
    "output": "expr : !1.0>=2.0\nresult : 0.000000\n"
  },
  {
    "name": "!2.0<=1.0\n",
    "params": [
      "!2.0<=1.0"
    ],
    "output": "expr : !2.0<=1.0\nresult : 1.000000\n"
  },
  {
    "name": "!2.0>=1.0\n",
    "params": [
      "!2.0>=1.0"
    ],
    "output": "expr : !2.0>=1.0\nresult : 0.000000\n"
  },
  {
    "name": "!1.0==1.0\n",
    "params": [
      "!1.0==1.0"
    ],
    "output": "expr : !1.0==1.0\nresult : 0.000000\n"
  },
  {
    "name": "!1.0>1.0\n",
    "params": [
      "!1.0>1.0"
    ],
    "output": "expr : !1.0>1.0\nresult : 0.000000\n"
  },
  {
    "name": "!1.0<1.0\n",
    "params": [
      "!1.0<1.0"
    ],
    "output": "expr : !1.0<1.0\nresult : 1.000000\n"
  },
  {
    "name": "!1.0>=1.0\n",
    "params": [
      "!1.0>=1.0"
    ],
    "output": "expr : !1.0>=1.0\nresult : 0.000000\n"
  },
  {
    "name": "!1.0<=1.0\n",
    "params": [
      "!1.0<=1.0"
    ],
    "output": "expr : !1.0<=1.0\nresult : 1.000000\n"
  },
  {
    "name": "!(1.0<2.0)\n",
    "params": [
      "!(1.0<2.0)"
    ],
    "output": "expr : !(1.0<2.0)\nresult : 0.000000\n"
  },
  {
    "name": "!(1.0>2.0)\n",
    "params": [
      "!(1.0>2.0)"
    ],
    "output": "expr : !(1.0>2.0)\nresult : 1.000000\n"
  },
  {
    "name": "!(1.0==2.0)\n",
    "params": [
      "!(1.0==2.0)"
    ],
    "output": "expr : !(1.0==2.0)\nresult : 1.000000\n"
  },
  {
    "name": "!(2.0<1.0)\n",
    "params": [
      "!(2.0<1.0)"
    ],
    "output": "expr : !(2.0<1.0)\nresult : 1.000000\n"
  },
  {
    "name": "!(2.0>1.0)\n",
    "params": [
      "!(2.0>1.0)"
    ],
    "output": "expr : !(2.0>1.0)\nresult : 0.000000\n"
  },
  {
    "name": "!(2.0==1.0)\n",
    "params": [
      "!(2.0==1.0)"
    ],
    "output": "expr : !(2.0==1.0)\nresult : 1.000000\n"
  },
  {
    "name": "!(1.0<=2.0)\n",
    "params": [
      "!(1.0<=2.0)"
    ],
    "output": "expr : !(1.0<=2.0)\nresult : 0.000000\n"
  },
  {
    "name": "!(1.0>=2.0)\n",
    "params": [
      "!(1.0>=2.0)"
    ],
    "output": "expr : !(1.0>=2.0)\nresult : 1.000000\n"
  },
  {
    "name": "!(2.0<=1.0)\n",
    "params": [
      "!(2.0<=1.0)"
    ],
    "output": "expr : !(2.0<=1.0)\nresult : 1.000000\n"
  },
  {
    "name": "!(2.0>=1.0)\n",
    "params": [
      "!(2.0>=1.0)"
    ],
    "output": "expr : !(2.0>=1.0)\nresult : 0.000000\n"
  },
  {
    "name": "!(1.0==1.0)\n",
    "params": [
      "!(1.0==1.0)"
    ],
    "output": "expr : !(1.0==1.0)\nresult : 0.000000\n"
  },
  {
    "name": "!(1.0>1.0)\n",
    "params": [
      "!(1.0>1.0)"
    ],
    "output": "expr : !(1.0>1.0)\nresult : 1.000000\n"
  },
  {
    "name": "!(1.0<1.0)\n",
    "params": [
      "!(1.0<1.0)"
    ],
    "output": "expr : !(1.0<1.0)\nresult : 1.000000\n"
  },
  {
    "name": "!(1.0>=1.0)\n",
    "params": [
      "!(1.0>=1.0)"
    ],
    "output": "expr : !(1.0>=1.0)\nresult : 0.000000\n"
  },
  {
    "name": "!(1.0<=1.0)\n",
    "params": [
      "!(1.0<=1.0)"
    ],
    "output": "expr : !(1.0<=1.0)\nresult : 0.000000\n"
  },
  {
    "name": "!1+3\n",
    "params": [
      "!1+3"
    ],
    "output": "expr : !1+3\nresult : 3.000000\n"
  },
  {
    "name": "(!1)+3\n",
    "params": [
      "(!1)+3"
    ],
    "output": "expr : (!1)+3\nresult : 3.000000\n"
  },
  {
    "name": "!(1+3)\n",
    "params": [
      "!(1+3)"
    ],
    "output": "expr : !(1+3)\nresult : 0.000000\n"
  },
  {
    "name": "1<2+3\n",
    "params": [
      "1<2+3"
    ],
    "output": "expr : 1<2+3\nresult : 1.000000\n"
  },
  {
    "name": "(1<2)+3\n",
    "params": [
      "(1<2)+3"
    ],
    "output": "expr : (1<2)+3\nresult : 4.000000\n"
  },
  {
    "name": "!sin(2)\n",
    "params": [
      "!sin(2)"
    ],
    "output": "expr : !sin(2)\nresult : 0.000000\n"
  },
  {
    "name": "!(sin(2))\n",
    "params": [
      "!(sin(2))"
    ],
    "output": "expr : !(sin(2))\nresult : 0.000000\n"
  },
  {
    "name": "sin(2)<0.1\n",
    "params": [
      "sin(2)<0.1"
    ],
    "output": "expr : sin(2)<0.1\nresult : 0.000000\n"
  },
  {
    "name": "1==1.0\n",
    "params": [
      "1==1.0"
    ],
    "output": "expr : 1==1.0\nresult : 1.000000\n"
  },
  {
    "name": "1!=1.0\n",
    "params": [
      "1!=1.0"
    ],
    "output": "expr : 1!=1.0\nresult : 0.000000\n"
  },
  {
    "name": "2!=3\n",
    "params": [
      "2!=3"
    ],
    "output": "expr : 2!=3\nresult : 1.000000\n"
  },
  {
    "name": "1 == 1.0\n",
    "params": [
      "1 == 1.0"
    ],
    "output": "expr : 1 == 1.0\nresult : 1.000000\n"
  },
  {
    "name": "1=1.0\n",
    "params": [
      "1=1.0"
    ],
    "output": "expr : 1=1.0\nError: Expected a '=' for boolean '==' operator!\nExpression '1=1.0' failed to parse, returning nan\nresult : -nan\n"
  },
  {
    "name": "1= 1.0\n",
    "params": [
      "1= 1.0"
    ],
    "output": "expr : 1= 1.0\nError: Expected a '=' for boolean '==' operator!\nExpression '1= 1.0' failed to parse, returning nan\nresult : -nan\n"
  },
  {
    "name": "1= =1\n",
    "params": [
      "1= =1"
    ],
    "output": "expr : 1= =1\nError: Expected a '=' for boolean '==' operator!\nExpression '1= =1' failed to parse, returning nan\nresult : -nan\n"
  },
  {
    "name": "1&&0\n",
    "params": [
      "1&&0"
    ],
    "output": "expr : 1&&0\nresult : 0.000000\n"
  },
  {
    "name": "1&&1\n",
    "params": [
      "1&&1"
    ],
    "output": "expr : 1&&1\nresult : 1.000000\n"
  },
  {
    "name": "1||0\n",
    "params": [
      "1||0"
    ],
    "output": "expr : 1||0\nresult : 1.000000\n"
  },
  {
    "name": "1||1\n",
    "params": [
      "1||1"
    ],
    "output": "expr : 1||1\nresult : 1.000000\n"
  },
  {
    "name": "0&&0\n",
    "params": [
      "0&&0"
    ],
    "output": "expr : 0&&0\nresult : 0.000000\n"
  },
  {
    "name": "0&&1\n",
    "params": [
      "0&&1"
    ],
    "output": "expr : 0&&1\nresult : 0.000000\n"
  },
  {
    "name": "0||0\n",
    "params": [
      "0||0"
    ],
    "output": "expr : 0||0\nresult : 0.000000\n"
  },
  {
    "name": "0||1\n",
    "params": [
      "0||1"
    ],
    "output": "expr : 0||1\nresult : 1.000000\n"
  },
  {
    "name": "1&1\n",
    "params": [
      "1&1"
    ],
    "output": "expr : 1&1\nError: Expected '&' to follow '&' in logical and operation!\nExpression '1&1' failed to parse, returning nan\nresult : -nan\n"
  },
  {
    "name": "1 &1\n",
    "params": [
      "1 &1"
    ],
    "output": "expr : 1 &1\nError: Expected '&' to follow '&' in logical and operation!\nExpression '1 &1' failed to parse, returning nan\nresult : -nan\n"
  },
  {
    "name": "1 & & 1\n",
    "params": [
      "1 & & 1"
    ],
    "output": "expr : 1 & & 1\nError: Expected '&' to follow '&' in logical and operation!\nExpression '1 & & 1' failed to parse, returning nan\nresult : -nan\n"
  },
  {
    "name": "1|1\n",
    "params": [
      "1|1"
    ],
    "output": "expr : 1|1\nError: Expected '|' to follow '|' in logical or operation!\nExpression '1|1' failed to parse, returning nan\nresult : -nan\n"
  },
  {
    "name": "1 |1\n",
    "params": [
      "1 |1"
    ],
    "output": "expr : 1 |1\nError: Expected '|' to follow '|' in logical or operation!\nExpression '1 |1' failed to parse, returning nan\nresult : -nan\n"
  },
  {
    "name": "1 | | 1\n",
    "params": [
      "1 | | 1"
    ],
    "output": "expr : 1 | | 1\nError: Expected '|' to follow '|' in logical or operation!\nExpression '1 | | 1' failed to parse, returning nan\nresult : -nan\n"
  },
  {
    "name": "0&0\n",
    "params": [
      "0&0"
    ],
    "output": "expr : 0&0\nError: Expected '&' to follow '&' in logical and operation!\nExpression '0&0' failed to parse, returning nan\nresult : -nan\n"
  },
  {
    "name": "0 &0\n",
    "params": [
      "0 &0"
    ],
    "output": "expr : 0 &0\nError: Expected '&' to follow '&' in logical and operation!\nExpression '0 &0' failed to parse, returning nan\nresult : -nan\n"
  },
  {
    "name": "0 & & 0\n",
    "params": [
      "0 & & 0"
    ],
    "output": "expr : 0 & & 0\nError: Expected '&' to follow '&' in logical and operation!\nExpression '0 & & 0' failed to parse, returning nan\nresult : -nan\n"
  },
  {
    "name": "0|0\n",
    "params": [
      "0|0"
    ],
    "output": "expr : 0|0\nError: Expected '|' to follow '|' in logical or operation!\nExpression '0|0' failed to parse, returning nan\nresult : -nan\n"
  },
  {
    "name": "0 |0\n",
    "params": [
      "0 |0"
    ],
    "output": "expr : 0 |0\nError: Expected '|' to follow '|' in logical or operation!\nExpression '0 |0' failed to parse, returning nan\nresult : -nan\n"
  },
  {
    "name": "0 | | 0\n",
    "params": [
      "0 | | 0"
    ],
    "output": "expr : 0 | | 0\nError: Expected '|' to follow '|' in logical or operation!\nExpression '0 | | 0' failed to parse, returning nan\nresult : -nan\n"
  },
  {
    "name": "4||0\n",
    "params": [
      "4||0"
    ],
    "output": "expr : 4||0\nresult : 1.000000\n"
  },
  {
    "name": "4&&0\n",
    "params": [
      "4&&0"
    ],
    "output": "expr : 4&&0\nresult : 0.000000\n"
  },
  {
    "name": "0||4\n",
    "params": [
      "0||4"
    ],
    "output": "expr : 0||4\nresult : 1.000000\n"
  },
  {
    "name": "0&&4\n",
    "params": [
      "0&&4"
    ],
    "output": "expr : 0&&4\nresult : 0.000000\n"
  },
  {
    "name": "4||1\n",
    "params": [
      "4||1"
    ],
    "output": "expr : 4||1\nresult : 1.000000\n"
  },
  {
    "name": "4&&1\n",
    "params": [
      "4&&1"
    ],
    "output": "expr : 4&&1\nresult : 1.000000\n"
  },
  {
    "name": "(1<3)&&1\n",
    "params": [
      "(1<3)&&1"
    ],
    "output": "expr : (1<3)&&1\nresult : 1.000000\n"
  },
  {
    "name": "(3>=4)||(2/3<1)\n",
    "params": [
      "(3>=4)||(2/3<1)"
    ],
    "output": "expr : (3>=4)||(2/3<1)\nresult : 1.000000\n"
  },
  {
    "name": "1<3&&1\n",
    "params": [
      "1<3&&1"
    ],
    "output": "expr : 1<3&&1\nresult : 1.000000\n"
  },
  {
    "name": "1<3 && 1\n",
    "params": [
      "1<3 && 1"
    ],
    "output": "expr : 1<3 && 1\nresult : 1.000000\n"
  },
  {
    "name": "1 < 3&&1\n",
    "params": [
      "1 < 3&&1"
    ],
    "output": "expr : 1 < 3&&1\nresult : 1.000000\n"
  },
  {
    "name": "sin(2)&&4\n",
    "params": [
      "sin(2)&&4"
    ],
    "output": "expr : sin(2)&&4\nresult : 1.000000\n"
  },
  {
    "name": "\n",
    "params": [
      ""
    ],
    "output": "expr : \nError: Failed to read real number\nExpression '' failed to parse, returning nan\nresult : -nan\n"
  }
]